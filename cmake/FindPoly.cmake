if(NOT FORCE_SHIPPED_RESOURCES)
	find_path(LIBPOLY_INCLUDE_DIR NAMES poly/poly.h)
	find_library(LIBPOLY_SHARED NAMES poly${DYNAMIC_EXT})
	find_library(LIBPOLY_STATIC NAMES poly${STATIC_EXT})
	find_library(LIBPOLYXX_SHARED NAMES polyxx${DYNAMIC_EXT})
	find_library(LIBPOLYXX_STATIC NAMES polyxx${STATIC_EXT})
endif()

set(LIBPOLY_FOUND_SYSTEM FALSE)

if(LIBPOLY_INCLUDE_DIR AND LIBPOLY_SHARED AND LIBPOLY_STATIC AND LIBPOLYXX_SHARED AND LIBPOLYXX_STATIC)
	#message(STATUS "Found libpoly: ${LIBPOLY_INCLUDE_DIR} ${LIBPOLY_SHARED} ${LIBPOLY_STATIC} ${LIBPOLYXX_SHARED} ${LIBPOLYXX_STATIC}")
	#set(LIBPOLY_FOUND_SYSTEM TRUE)
	#TODO: Somehow this does not work, so we use the shipped version for now
endif()

if(NOT LIBPOLY_FOUND_SYSTEM)
	ExternalProject_Add(
	LIBPOLY-EP
	GIT_REPOSITORY https://github.com/SRI-CSL/libpoly
	PATCH_COMMAND git reset --hard
	COMMAND git apply ${CMAKE_SOURCE_DIR}/cmake/patches/libpoly_variable_db.patch
	CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release
			-DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
			-DLIBPOLY_BUILD_PYTHON_API=OFF
			-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
			-DCMAKE_SKIP_INSTALL_ALL_DEPENDENCY=TRUE
			-DGMP_INCLUDE_DIR=${GMP_INCLUDE_DIR}
		BUILD_COMMAND ${CMAKE_COMMAND} <SOURCE_DIR>
		COMMAND ${CMAKE_MAKE_PROGRAM} poly polyxx static_poly static_polyxx static_pic_poly static_pic_polyxx
		COMMAND ${CMAKE_MAKE_PROGRAM} install
		BUILD_BYPRODUCTS 
			<INSTALL_DIR>/lib/libpoly${STATIC_EXT}
			<INSTALL_DIR>/lib/libpoly${DYNAMIC_EXT}
			<INSTALL_DIR>/lib/libpolyxx${STATIC_EXT}
			<INSTALL_DIR>/lib/libpolyxx${DYNAMIC_EXT}
	)
#	ExternalProject_Add_Step(
#		LIBPOLY-EP cleanup
#		DEPENDEES install
#		COMMAND ${CMAKE_COMMAND} -E remove_directory <BINARY_DIR>/test/
#	)

	get_target_property(GMP_LIBRARY GMP_STATIC IMPORTED_LOCATION)
	get_filename_component(GMP_LIBRARY_DIR ${GMP_LIBRARY} DIRECTORY)

	set(LIBPOLY_INCLUDE_DIR "${CMAKE_BINARY_DIR}/resources/include")

	set(LIBPOLY_SHARED "${CMAKE_BINARY_DIR}/resources/lib/libpoly${DYNAMIC_EXT}")
	set(LIBPOLY_STATIC "${CMAKE_BINARY_DIR}/resources/lib/libpoly${STATIC_EXT}")
	set(LIBPOLYXX_SHARED "${CMAKE_BINARY_DIR}/resources/lib/libpolyxx${DYNAMIC_EXT}")
	set(LIBPOLYXX_STATIC "${CMAKE_BINARY_DIR}/resources/lib/libpolyxx${STATIC_EXT}")


add_dependencies(LIBPOLY-EP GMP_SHARED GMPXX_SHARED)

endif()


add_library(LIBPOLY_SHARED SHARED IMPORTED GLOBAL)
target_link_libraries(LIBPOLY_SHARED INTERFACE GMP_SHARED)
set_target_properties(LIBPOLY_SHARED PROPERTIES
	IMPORTED_LOCATION ${LIBPOLY_SHARED}
	INTERFACE_INCLUDE_DIRECTORIES ${LIBPOLY_INCLUDE_DIR}
	INTERFACE_LINK_LIBRARIES "${GMP_SHARED}"
)

add_library(LIBPOLY_STATIC STATIC IMPORTED GLOBAL)
target_link_libraries(LIBPOLY_STATIC INTERFACE GMP_STATIC)
set_target_properties(LIBPOLY_STATIC PROPERTIES
	IMPORTED_LOCATION ${LIBPOLY_STATIC}
	INTERFACE_INCLUDE_DIRECTORIES ${LIBPOLY_INCLUDE_DIR}
	INTERFACE_LINK_LIBRARIES "${GMP_STATIC}"
)

add_library(LIBPOLYXX_SHARED SHARED IMPORTED GLOBAL)
target_link_libraries(LIBPOLY_STATIC INTERFACE GMPXX_SHARED)
set_target_properties(LIBPOLYXX_SHARED PROPERTIES
	IMPORTED_LOCATION ${LIBPOLYXX_SHARED}
	INTERFACE_INCLUDE_DIRECTORIES ${LIBPOLY_INCLUDE_DIR}
	INTERFACE_LINK_LIBRARIES "${LIBPOLY_SHARED}"
)

add_library(LIBPOLYXX_STATIC STATIC IMPORTED GLOBAL)
target_link_libraries(LIBPOLY_STATIC INTERFACE GMPXX_STATIC)
set_target_properties(LIBPOLYXX_STATIC PROPERTIES
	IMPORTED_LOCATION ${LIBPOLYXX_STATIC}
	INTERFACE_INCLUDE_DIRECTORIES ${LIBPOLY_INCLUDE_DIR}
	INTERFACE_LINK_LIBRARIES "${LIBPOLY_STATIC}"
)

add_dependencies(LIBPOLY_SHARED GMP_SHARED)
add_dependencies(LIBPOLY_STATIC GMP_STATIC)
add_dependencies(LIBPOLYXX_SHARED GMPXX_SHARED)
add_dependencies(LIBPOLYXX_STATIC GMPXX_STATIC)

if(NOT LIBPOLY_FOUND_SYSTEM)
	add_dependencies(LIBPOLY_SHARED LIBPOLY-EP)
	add_dependencies(LIBPOLY_STATIC LIBPOLY-EP)
	add_dependencies(LIBPOLYXX_SHARED LIBPOLY-EP)
	add_dependencies(LIBPOLYXX_STATIC LIBPOLY-EP)
endif()

set(LIBPOLY_FOUND TRUE)

mark_as_advanced(LIBPOLY_INCLUDE_DIR LIBPOLY_SHARED LIBPOLY_STATIC LIBPOLYXX_SHARED LIBPOLYXX_STATIC LIBPOLY_FOUND)