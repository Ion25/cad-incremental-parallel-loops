# File: macros.cmake
# Authors: Igor N. Bongartz
# Erstellt: 2015-06-11
# Version: 2015-06-11
#
# This file contains several macros which are used in this project. Notice that several are copied straight from web ressources.

macro(add_imported_library_interface name include)
	add_library(${name} INTERFACE IMPORTED)
	set_target_properties(${name} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${include}")
endmacro(add_imported_library_interface)

macro(add_imported_library name type lib include)
	# Workaround from https://cmake.org/Bug/view.php?id=15052
	file(MAKE_DIRECTORY "${include}")
	if("${lib}" STREQUAL "")
		if("${type}" STREQUAL "SHARED")
			add_library(${name} INTERFACE IMPORTED)
			set_target_properties(${name} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${include}")
		endif()
	else()
		set(lib_list "${lib}")
		list(LENGTH lib_list NumFiles)
		if(NumFiles GREATER 1)
			add_library(${name}_${type} INTERFACE IMPORTED GLOBAL)
			set(libs "")
			foreach(l ${lib_list})
				get_filename_component(shortname ${l} NAME_WE)
				add_imported_library("${name}_${shortname}" ${type} ${l} ${include})
				set(libs "${libs};${name}_${shortname}_${type}")
				add_dependencies(${name}_${type} ${name}_${shortname}_${type})
			endforeach()
			set_target_properties(${name}_${type} PROPERTIES INTERFACE_LINK_LIBRARIES "${libs}")
		else()
			add_library(${name}_${type} ${type} IMPORTED GLOBAL)
			set_target_properties(${name}_${type} PROPERTIES IMPORTED_LOCATION "${lib}")
			set_target_properties(${name}_${type} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${include}")
		endif()
	endif()
endmacro(add_imported_library)

macro(export_option name)
	list(APPEND EXPORTED_OPTIONS "${name}")
endmacro(export_option)

macro(_export_target_add_lib output TARGET TYPE)
	set(${output} "${${output}}

add_library(${TARGET} ${TYPE} IMPORTED)")
endmacro(_export_target_add_lib)

macro(_export_target_set_prop output TARGET PROPERTY)
	get_target_property(VALUE ${TARGET} ${PROPERTY})
	set(extra_args ${ARGN})
	list(GET extra_args 0 NEWPROPERTY)
	if(NOT NEWPROPERTY)
		set(NEWPROPERTY ${PROPERTY})
	endif()
	if(VALUE)
		set(${output} "${${output}}
set_target_properties(${TARGET} PROPERTIES ${NEWPROPERTY} \"${VALUE}\")")
	endif()
endmacro(_export_target_set_prop)

macro(export_target output TARGET)
	get_target_property(TYPE ${TARGET} TYPE)
	if(TYPE STREQUAL "SHARED_LIBRARY")
		_export_target_add_lib(${output} ${TARGET} SHARED)
		_export_target_set_prop(${output} ${TARGET} IMPORTED_LOCATION)
		_export_target_set_prop(${output} ${TARGET} INTERFACE_INCLUDE_DIRECTORIES)
		_export_target_set_prop(${output} ${TARGET} LINK_INTERFACE_LIBRARIES)
	elseif(TYPE STREQUAL "STATIC_LIBRARY")
		_export_target_add_lib(${output} ${TARGET} STATIC)
		_export_target_set_prop(${output} ${TARGET} IMPORTED_LOCATION)
		_export_target_set_prop(${output} ${TARGET} INTERFACE_INCLUDE_DIRECTORIES)
		_export_target_set_prop(${output} ${TARGET} LINK_INTERFACE_LIBRARIES IMPORTED_LINK_INTERFACE_LIBRARIES)
	elseif(TYPE STREQUAL "INTERFACE_LIBRARY")
		_export_target_add_lib(${output} ${TARGET} INTERFACE)
		_export_target_set_prop(${output} ${TARGET} INTERFACE_INCLUDE_DIRECTORIES)
		_export_target_set_prop(${output} ${TARGET} INTERFACE_LINK_LIBRARIES)
	else()
		message(STATUS "Unknown type ${TYPE}")
	endif()
endmacro(export_target)

macro(export_target_recursive output TARGET RECURSE_ON)
	export_target(${output} ${TARGET})
	get_target_property(deps ${TARGET} ${RECURSE_ON})
	foreach(d ${deps})
		export_target(${output} ${d})
	endforeach()
endmacro(export_target_recursive)

macro(load_library group name version)
    string(TOUPPER ${name} LIBNAME)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${DYNAMIC_EXT})
    set(Boost_USE_STATIC_LIBS OFF)
    find_package(${name} ${version} ${ARGN} QUIET)
    if(${name}_FOUND OR ${LIBNAME}_FOUND)
        if (${name}_FOUND)
            set(LIBNAME ${name})
        endif()
		
		add_imported_library(${LIBNAME} SHARED "${${LIBNAME}_LIBRARY}" "${${LIBNAME}_INCLUDE_DIR}")

        unset(${LIBNAME}_FOUND CACHE)
        unset(${LIBNAME}_INCLUDE_DIR CACHE)
        unset(${LIBNAME}_LIBRARY CACHE)

        set(CMAKE_FIND_LIBRARY_SUFFIXES ${STATIC_EXT})
        set(Boost_USE_STATIC_LIBS ON)
        if (ARGN)
            list(REMOVE_ITEM ARGN "REQUIRED")
        endif()
        find_package(${name} ${version} ${ARGN} QUIET)
        if(${LIBNAME}_FOUND)
			add_imported_library(${LIBNAME} STATIC "${${LIBNAME}_LIBRARY}" "${${LIBNAME}_INCLUDE_DIR}")
        endif()

        unset(${LIBNAME}_LIBRARY CACHE)
    else()
        message("-- Library ${name} was not found.")
    endif()
endmacro(load_library)

macro(get_include_dir var name)
	get_target_property(INCLUDE_DIR ${name} INTERFACE_INCLUDE_DIRECTORIES)
	set(${var} ${${var}}:${INCLUDE_DIR})
endmacro(get_include_dir)
