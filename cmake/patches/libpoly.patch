diff --git a/include/polynomial.h b/include/polynomial.h
index 8a9533f..12123e8 100644
--- a/include/polynomial.h
+++ b/include/polynomial.h
@@ -109,6 +109,8 @@ int lp_polynomial_lc_sgn(const lp_polynomial_t* A);
 /** Get the context of the given polynomial */
 const lp_polynomial_context_t* lp_polynomial_get_context(const lp_polynomial_t* A);
 
+void lp_polynomial_set_context(lp_polynomial_t* A, const lp_polynomial_context_t* ctx);
+
 /** Returns all the variables (it will not clear the output list vars) */
 void lp_polynomial_get_variables(const lp_polynomial_t* A, lp_variable_list_t* vars);
 
diff --git a/src/polynomial/polynomial.c b/src/polynomial/polynomial.c
index 11d948f..e507f52 100644
--- a/src/polynomial/polynomial.c
+++ b/src/polynomial/polynomial.c
@@ -1031,6 +1031,17 @@ void lp_polynomial_roots_isolate(const lp_polynomial_t* A, const lp_assignment_t
     lp_value_construct_none(&x_value_backup);
   }
 
+  lp_polynomial_t* B;
+  {
+    coefficient_t A_rat;
+    lp_integer_t multiplier;
+    integer_construct(&multiplier);
+    coefficient_construct(A->ctx, &A_rat);
+    coefficient_evaluate_rationals(A->ctx, &A->data, M, &A_rat, &multiplier);
+    B = lp_polynomial_new_from_coefficient(A->ctx, &A_rat);
+    coefficient_destruct(&A_rat);
+  }
+
   size_t i;
 
   lp_polynomial_t** factors = 0;
@@ -1044,11 +1055,13 @@ void lp_polynomial_roots_isolate(const lp_polynomial_t* A, const lp_assignment_t
   // Get the reduced polynomial
   lp_polynomial_t A_r;
   lp_polynomial_construct(&A_r, A->ctx);
-  lp_polynomial_reductum_m(&A_r, A, M);
-  assert(x == lp_polynomial_top_variable(A));
-
-  // Get the square-free factorization
-  lp_polynomial_factor_square_free(&A_r, &factors, &multiplicities, &factors_size);
+  if (x == lp_polynomial_top_variable(B)) {
+    lp_polynomial_reductum_m(&A_r, B, M);
+    assert(x == lp_polynomial_top_variable(B));
+    // Get the square-free factorization
+    lp_polynomial_factor_square_free(&A_r, &factors, &multiplicities, &factors_size);
+  }
+  lp_polynomial_delete(B);
 
   // Count the max number of roots
   size_t total_degree = 0;
diff --git a/src/variable/variable_db.c b/src/variable/variable_db.c
index 60f3df4..33866c4 100644
--- a/src/variable/variable_db.c
+++ b/src/variable/variable_db.c
@@ -63,9 +63,11 @@ void lp_variable_db_add_variable(lp_variable_db_t* var_db, lp_variable_t var, co
   assert(var_db);
   while (var >= var_db->capacity) {
     lp_variable_db_resize(var_db, 2*var_db->capacity);
+    var_db->size = var_db->capacity < var ? var_db->capacity : var;
   }
   assert(var_db->variable_names[var] == 0);
   var_db->variable_names[var] = strdup(name);
+  var_db->size = var_db->size < var ? var : var_db->size;
 }
 
 void lp_variable_db_construct(lp_variable_db_t* var_db) {
